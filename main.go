package main

import (
	"encoding/json"
	"flag"
	"fmt"
	"strings"

	"github.com/golang/glog"
)

func jsonToGo(jsonBytes []byte) (string, error) {
	result := ""
	dummy := ""
	isValid := json.Valid(jsonBytes)
	if !isValid {
		return dummy, fmt.Errorf("json invalid")
	}

	var data interface{}
	err := json.Unmarshal(jsonBytes, &data)
	if err != nil {
		return dummy, err
	}

	structName := "Autogenerated"
	result += "type " + structName

	glog.Infoln(data)

	return result + parseScope(data) + "}", nil
}

func parseScope(data interface{}) string {
	result := ""
	scope := getType(data)
	if scope == "[]interface{}" {
		dataArray := data.([]interface{})
		sliceType := ""
		for _, d := range dataArray {
			_type := getType(d)
			if len(sliceType) == 0 {
				sliceType = _type
			} else if _type != sliceType {
				sliceType = "interface{}"
				break
			}
		}
		slice := "[]"
		result += slice

		if sliceType == "map[string]interface{}" { // struct in array
			type ValueCount struct {
				Value interface{}
				Count int
			}
			mapAllFields := make(map[string]*ValueCount)
			length := len(dataArray)
			for _, d := range dataArray {
				for k, v := range d.(map[string]interface{}) {
					valueCount, ok := mapAllFields[k]
					glog.Infoln(valueCount, ok)
					if !ok {
						mapAllFields[k] = &ValueCount{
							Value: v,
							Count: 1,
						}
					} else {
						valueCount.Count++
					}
				}
			}

			omitEmpty := make(map[string]bool)
			structFields := make(map[string]interface{})

			// log debug
			for k, valueCount := range mapAllFields {
				glog.Infoln(k, valueCount)
			}

			for keyname, valueCount := range mapAllFields {
				structFields[keyname] = valueCount.Value
				omitEmpty[keyname] = valueCount.Count != length
			}
			result += parseStruct(structFields, omitEmpty)
		}

	} else if scope == "map[string]interface{}" {
		result += parseStruct(data.(map[string]interface{}), nil)
		result += "}"
	} else {
		result += scope
	}

	return result
}

func parseStruct(structFields map[string]interface{}, omitEmpty map[string]bool) string {
	result := " struct {\n "
	glog.Infoln(omitEmpty)

	for key, value := range structFields {
		result += "\t "
		result += makeFieldName(key) + " "
		temp := parseScope(value)
		temp += " `json:\"" + key
		if isOmitEmpty, ok := omitEmpty[key]; ok && isOmitEmpty {
			temp += ",omitempty"
		}
		temp += "\"`"
		result += temp + "\n"
	}

	return result
}

func getType(data interface{}) string {
	switch data.(type) {
	case int:
		return "int"
	case float64:
		return "float64"
	case string:
		return "string"
	case bool:
		return "bool"
	case []interface{}:
		return "[]interface{}"
	case map[string]interface{}:
		return "map[string]interface{}"
	default:
		return "interface{}"
	}
}

func makeFieldName(field string) string {
	field = strings.ReplaceAll(field, "_", " ")
	return strings.ReplaceAll(strings.Title(field), " ", "")
}

func isCommonType(_type string) bool {
	return (_type == "int" || _type == "float64" || _type == "string")
}

// func parseScope(scope map[string]interface, depth=0)

func main() {
	flag.Parse()
	// var jsonBytes = []byte(`
	// [{
	// 	"zp_trans_id": "string",
	// 	"mc_note": "string",
	// 	"action_by": "string",
	// 	"encoded_order_id": "string",
	// 	"app_id": "string",
	// 	"reason": "string",
	// 	"is_not_refund": true
	//   },
	// {
	// 	"zp_trans_id": "string",
	// 	"mc_note": "string",
	// 	"action_by": "string",
	// 	"encoded_order_id": "string",
	// 	"app_id": "string",
	// 	"is_not_refund": true
	//   }
	// ]
	// `)
	var jsonBytes = []byte(`
	[{"key1": "value1","key2": "value2","key3": {"key4": "value4"}}]
	`)
	tempStruct, err := jsonToGo(jsonBytes)
	if err != nil {
		glog.Infoln(err)
	}
	glog.Infoln(tempStruct)
	// glog.Infoln("type AutoGenerated struct {\n" +
	// 	"\tKey1 Key1 `json:\"key1\"`\n" +
	// 	"}\n" +
	// 	"type Key4 struct {\n" +
	// 	"\tKey5 string `json:\"key5\"`\n" +
	// 	"}\n" +
	// 	"type Key3 struct {\n" +
	// 	"\tKey4 Key4 `json:\"key4\"`\n" +
	// 	"}\n" +
	// 	"type Key2 struct {\n" +
	// 	"\tKey3 Key3 `json:\"key3\"`\n" +
	// 	"}\n" +
	// 	"type Key1 struct {\n" +
	// 	"\tKey2 Key2 `json:\"key2\"`\n" +
	// 	"}")
}
