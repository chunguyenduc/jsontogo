package main

import (
	"encoding/json"
	"fmt"
	"strings"

	"github.com/golang/glog"
)

func jsonToGo(jsonBytes []byte) (string, error) {
	result := ""
	dummy := ""
	isValid := json.Valid(jsonBytes)
	if !isValid {
		return dummy, fmt.Errorf("json invalid")
	}

	var data interface{}
	err := json.Unmarshal(jsonBytes, &data)
	if err != nil {
		return dummy, err
	}

	structName := "Autogenerated"
	result += "type " + structName

	glog.Infoln(data)

	return parseScope(data), nil
}

func parseScope(data interface{}) string {
	structName := "Autogenerated"
	result := "type " + structName
	scope := getType(data)
	if scope == "[]interface{}" {
		dataArray := data.([]interface{})
		sliceType := ""
		for _, d := range dataArray {
			_type := getType(d)
			if len(sliceType) == 0 {
				sliceType = _type
			} else if _type != sliceType {
				sliceType = "interface{}"
				break
			}
		}
		slice := "[]"
		result += slice

		if sliceType == "map[string]interface{}" { // struct in array
			type ValueCount struct {
				Value interface{}
				Count int
			}
			mapAllFields := make(map[string]ValueCount)
			length := len(dataArray)
			for _, d := range dataArray {
				for k, v := range d.(map[string]interface{}) {
					if valueCount, ok := mapAllFields[k]; !ok {
						mapAllFields[k] = ValueCount{
							Value: v,
							Count: 0,
						}
					} else {
						valueCount.Count += 1
					}
				}
			}

			omitEmpty := make(map[string]bool)
			structFields := make(map[string]interface{})
			for keyname, valueCount := range mapAllFields {
				structFields[keyname] = valueCount.Value
				omitEmpty[keyname] = valueCount.Count != length
			}
			result += parseStruct(structFields, omitEmpty)
		}

	} else {
		glog.Infoln(scope)
	}
	result += "}"
	return result
}

func parseStruct(structFields map[string]interface{}, omitEmpty map[string]bool) string {
	result := "struct {\n "

	for key, value := range structFields {
		result += "\t "
		result += strings.Title(key) + " "
		_type := getType(value)
		
		result += _type + "\n"

	}

	return result
}

func getType(data interface{}) string {
	switch data.(type) {
	case int:
		return "int:"
	case float64:
		return "float64:"
	case string:
		return "string"
	case []interface{}:
		return "[]interface{}"
	case map[string]interface{}:
		return "map[string]interface{}"
	default:
		return "interface{}"
	}
}

// func parseScope(scope map[string]interface, depth=0)

func main() {
	var jsonBytes = []byte(`[
		{
			"key1": "value1",
			"key2": "value2"
		}
	]`)
	tempStruct, err := jsonToGo(jsonBytes)
	if err != nil {
		glog.Infoln(err)
	}
	glog.Infoln(tempStruct)
}
